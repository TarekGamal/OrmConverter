/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

/**
 *
 * @author Tarek
 */
import controller.Service;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Generate extends javax.swing.JFrame {

    File tableFile;
    File viewFile;

    public Generate() {
        initComponents();
        String javaTableName = Service.toCamelCase((String) tableComboBox.getSelectedItem());
        tableNameInputText.setText(javaTableName);

        String javaViewName = Service.toCamelCase((String) viewComboBox.getSelectedItem());
        viewNameInputText.setText(javaViewName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableComboBox = new javax.swing.JComboBox<>();
        viewComboBox = new javax.swing.JComboBox<>();
        viewLabel = new javax.swing.JLabel();
        tableLabel = new javax.swing.JLabel();
        tableNameInputText = new javax.swing.JTextField();
        viewNameInputText = new javax.swing.JTextField();
        tableNameLabel = new javax.swing.JLabel();
        viewNameLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        isViewRelatedToTableCheckBox = new javax.swing.JCheckBox();
        createStringforDateFieldsCheckBox = new javax.swing.JCheckBox();
        createBooleanforFlagFieldsCheckBox = new javax.swing.JCheckBox();
        saveDirectoryLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableComboBox.setModel(new javax.swing.DefaultComboBoxModel(Service.getTablesNames()));
        tableComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableComboBoxActionPerformed(evt);
            }
        });

        viewComboBox.setModel(new javax.swing.DefaultComboBoxModel(Service.getViewsNames()));
        viewComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewComboBoxActionPerformed(evt);
            }
        });

        viewLabel.setText("select view");

        tableLabel.setText("select table");

        tableNameLabel.setText("Table Name");

        viewNameLabel.setText("View Name");

        generateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateButton.setText("Generate !");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        isViewRelatedToTableCheckBox.setText("Link view with table");
        isViewRelatedToTableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isViewRelatedToTableCheckBoxActionPerformed(evt);
            }
        });

        createStringforDateFieldsCheckBox.setText("Create transient String field for every Date");
        createStringforDateFieldsCheckBox.setEnabled(false);

        createBooleanforFlagFieldsCheckBox.setText("create transient Boolean field for every Flag");
        createBooleanforFlagFieldsCheckBox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(tableNameLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(tableNameInputText))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(tableLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewLabel)
                                    .addComponent(viewNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewComboBox, 0, 271, Short.MAX_VALUE)
                                    .addComponent(viewNameInputText)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isViewRelatedToTableCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveDirectoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(createBooleanforFlagFieldsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(createStringforDateFieldsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 233, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableLabel)
                    .addComponent(viewLabel))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableNameInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableNameLabel)
                    .addComponent(viewNameInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewNameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isViewRelatedToTableCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(saveDirectoryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createStringforDateFieldsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createBooleanforFlagFieldsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                    .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:

        if (tableComboBox.getSelectedIndex() == -1 && viewComboBox.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a table and/or a view",
                    "Error message", JOptionPane.WARNING_MESSAGE, null);
        } else {
            String tableName = (String) tableComboBox.getSelectedItem();
            String viewName = (String) viewComboBox.getSelectedItem();

            if (tableName.isEmpty() && viewName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please choose a table and/or a view",
                        "Error message", JOptionPane.WARNING_MESSAGE, null);
                return;
            }
            String javaTableName = tableNameInputText.getText().trim();
            String javaViewName = viewNameInputText.getText().trim();

            javaTableName = javaTableName.isEmpty() ? null : javaTableName;
            javaViewName = javaViewName.isEmpty() ? null : javaViewName;

            try {
                JFileChooser chooser = new JFileChooser();
                chooser.setCurrentDirectory(new java.io.File("."));
                chooser.setDialogTitle("Choose save destination");
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                // disable the "All files" option.
                chooser.setAcceptAllFileFilterUsed(false);

                if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                    System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
                    System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
                    // save files
                    File[] files = Service.generate(chooser.getSelectedFile().toString(), tableName, viewName, javaTableName, javaViewName,
                            isViewRelatedToTableCheckBox.isSelected(), createStringforDateFieldsCheckBox.isSelected(), createBooleanforFlagFieldsCheckBox.isSelected());

                    if (files[0] != null) {
                        tableFile = files[0];
                    }
                    if (files[1] != null) {
                        viewFile = files[1];
                    }

                    System.out.println("done!");

                    JOptionPane.showMessageDialog(this, "Filed have been saved!", "Success!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    System.out.println("No Selection ");
                }
            } catch (IOException ex) {
                Logger.getLogger(Generate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void tableComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableComboBoxActionPerformed
        // TODO add your handling code here:
        String javaTableName = Service.toCamelCase((String) tableComboBox.getSelectedItem());
        tableNameInputText.setText(javaTableName);
    }//GEN-LAST:event_tableComboBoxActionPerformed

    private void viewComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewComboBoxActionPerformed
        // TODO add your handling code here:
        String javaViewName = Service.toCamelCase((String) viewComboBox.getSelectedItem());
        viewNameInputText.setText(javaViewName);
    }//GEN-LAST:event_viewComboBoxActionPerformed

    private void isViewRelatedToTableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isViewRelatedToTableCheckBoxActionPerformed
        // TODO add your handling code here:
        if (!isViewRelatedToTableCheckBox.isSelected()) {
            createBooleanforFlagFieldsCheckBox.setEnabled(false);
            createStringforDateFieldsCheckBox.setEnabled(false);

            createBooleanforFlagFieldsCheckBox.setSelected(false);
            createStringforDateFieldsCheckBox.setSelected(false);
        } else {
            createBooleanforFlagFieldsCheckBox.setEnabled(true);
            createStringforDateFieldsCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_isViewRelatedToTableCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Generate().setVisible(true);
            }
        });
    }

    JFileChooser fileChooser;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox createBooleanforFlagFieldsCheckBox;
    private javax.swing.JCheckBox createStringforDateFieldsCheckBox;
    private javax.swing.JButton generateButton;
    private javax.swing.JCheckBox isViewRelatedToTableCheckBox;
    private javax.swing.JLabel saveDirectoryLabel;
    private javax.swing.JComboBox<String> tableComboBox;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JTextField tableNameInputText;
    private javax.swing.JLabel tableNameLabel;
    private javax.swing.JComboBox<String> viewComboBox;
    private javax.swing.JLabel viewLabel;
    private javax.swing.JTextField viewNameInputText;
    private javax.swing.JLabel viewNameLabel;
    // End of variables declaration//GEN-END:variables
}
